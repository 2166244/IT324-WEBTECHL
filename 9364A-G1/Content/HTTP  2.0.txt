HTTP
> application layer communications protocol used to access resources (hypertext/ hypermedia)
> Jointly developed W3C and the IETF (Internet Engineering Task Force)

Version History:

HTTP 0.9 (1991)
HTTP/0.9 — The One-line Protocol
- Initial version of HTTP — a simple client-server, request-response, telenet-friendly protocol
- Request nature: single-line (method + path for requested document)
- Methods supported: GET only
- Response type: hypertext only
- Connection nature: terminated immediately after the response
- No HTTP headers (cannot transfer other content type files), No status/error codes, No URLs, No versioning

HTTP 1.0 (RFC 1945, May 1996) 
HTTP/1.0 — Building extensibility
- Browser-friendly protocol
- Provided header fields including rich metadata about both request and response (HTTP version number, status code, content type)
- Response: not limited to hypertext (Content-Type header provided ability to transmit files other than plain HTML files — e.g. scripts, stylesheets, media)
- Methods supported: GET , HEAD , POST
- Connection nature: terminated immediately after the response

TERMINOLOGIES:
1. Connection - A transport layer virtual circuit established between two
       application programs for the purpose of communication.
2. Message - The basic unit of HTTP communication, consisting of a structured
       sequence of octets matching the syntax and transmitted via the connection.
3. Request - HTTP request message
4. Response - HTTP response Message
5. Resource - Network data object or service which can be identified by a URI
6. Entity - A particular representation or rendition of a data resource, or
	reply from a service resource, that may be enclosed within a request or response message. 
7. Client - An application program that establishes connections for the
       purpose of sending requests.
8. User agent - The client which initiates a request. These are often browsers,
       editors, spiders (web-traversing robots), or other end user
       tools.
9. Server - An application program that accepts connections in order to
       service requests by sending back responses.
10. Origin server - The server on which a given resource resides or is to be created.
11. Proxy - Proxies are often used as client-side portals
       through network firewalls and as helper applications for
       handling requests via protocols not implemented by the user
       agent.
12. Gateway - Gateways are often used as server-side portals through network
       firewalls and as protocol translators for access to resources
       stored on non-HTTP systems.
13. Tunnel - A tunnel is an intermediary program which is acting as a blind
       relay between two connections.
14. Cache - A program's local store of response messages and the subsystem
       that controls its message storage, retrieval, and deletion.


HTTP 1.1 (RFC 2068, Jan 1997) 
HTTP/1.1 — The standardized protocol
- This is the HTTP version currently in common use.
- Introduced critical performance optimizations and feature enhancements — persistent and pipelined connections, chunked transfers, compression/decompression, content negotiations, virtual hosting (a server with a single IP Address hosting multiple domains), faster response and great bandwidth savings by adding cache support.
- Methods supported: GET , HEAD , POST , PUT , DELETE , TRACE , OPTIONS
- Connection nature: long-lived

HTTP 2 (RFC 7540 May 2015)
> enhancements between messaged are transmitted

HTTP FUNDAMENTALS
> runs on the op of TCP/IP

HTTPS - SSL/TLS (Layers of Security)

Client-server architecture
 >Servers: origin server, proxy server, gateways, tunnels
 > Clients aka user agents: web browser, web crawlers/spiders
 
 HTTP uses a request-response protocol
 HTTP is a stateless communication protocol and it does not keep 
 information about clients in between requests
 
 HTTP Resource Addressing
 > resources are identified using URIs (RFC 3986)
 
 Uniform Resource Identifier (URI): Generic Syntax
   A Uniform Resource Identifier (URI) is a compact sequence of
   characters that identifies an abstract or physical resource.
   
   A Uniform Resource Identifier (URI) provides a simple and extensible
   means for identifying a resource.  

 Overview of the URIs
	Uniform - It allows different types of resource identifiers t be used in the same
	context, even when the mechanisms used to access those resources may differ.	
	
	Resource - Source of information with a consistent purpose, service, and other collection 
	of resources
	- not necessarily accessible via the Internet
	- abstract concepts such as operators and operands of a mathematical equation, numeric values
	
	Identifier - embodies the information required to distinguish what is being identified from all 
	other things within its scope of identification
	
URL (Uniform Resource Locator)
- refers to the subset of URIs, in identifying a resource, provide a means of locating the resource 
by describing its primary access mechanisms (e.g - its network "location")

URN (Uniform Resource Name)
- historically refer to both URIs under the "urn" scheme (RFC 2141), which is required to remain 
globally unique and persistent even when the resource ceases to exists or becomes unavailable, and 
to any other URI with the properties of a name.

HTTP URL 
The term "web address" is a synonym for a URL that uses the HTTP or HTTPS protocol. The Uniform 
Resource Locator (URL) was developed by Tim Berners-Lee in 1994 and the Internet Engineering 
Task Force (IETF) URI working group. ... The URL format is specified in RFC 1738 Uniform Resource 
Locators (URL).

STANDARD HTTP REQUEST METHODS
HTTP defines a set of request methods to indicate the desired action to be performed for a given resource. 
Although they can also be nouns, these request methods are sometimes referred to as HTTP verbs. Each of 
them implements a different semantic, but some common features are shared by a group of them: e.g. a request
method can be safe, idempotent, or cacheable.

1. GET - This method requests a representation of the specified resource. Requests using GET should only retrieve data.
2. HEAD - This asks for a response identical to that of a GET request, but without the response body.
3. POST - It is used to submit an entity to the specified resource, often causing a change in state or side effects on the server
4. PUT - Changes all current representations of the target resource with the request payload.
5. DELETE - Removes the specified resource.
6. CONNECT - Establishes a tunnel to the server identified by the target resource.
7. OPTIONS - It is to describe the communication options for the target resource.
8. TRACE - Performs a message loop-back test along the path to the target resource.
9. PATCH - Used to apply partial modifications to a resource.

METHOD DEFINITIONS
The set of common methods for HTTP/1.1 is defined below. Although this set can be expanded, 
additional methods cannot be assumed to share the same semantics for separately extended 
clients and servers.

1. SAFE METHODS
In particular, the convention has been established that the GET and HEAD methods SHOULD NOT 
have the significance of taking an action other than retrieval. These methods ought to be 
considered "safe". 

2. IDEMPOTENT METHODS
Methods can also have the property of "idempotence" in that (aside from error or expiration issues) 
the side-effects of N > 0 identical requests is the same as for a single request. The methods GET, 
HEAD, PUT and DELETE share this property. Also, the methods OPTIONS and TRACE SHOULD NOT have side 
effects, and so are inherently idempotent.

3. CACHEABLE METHODS
Message that is already in cache


HTTP STATUS CODES 
Status codes are issued by a server in response to a client's request made to the server. It includes 
codes from IETF Request for Comments (RFCs), other specifications, and some additional codes used in 
some common applications of the Hypertext Transfer Protocol (HTTP).
 
1XX INFORMATIONAL RESPONSES
100 Continue
101 Switching Protocols
102 Processing
103 Early Hints

2XX SUCCESS
100 OK
201 Created
202 Accepted
203 Non-Authoritative Information
204 No content
205 Reset Content
206 Partial Content
207 Multi-status
208 Already Reported
226 IM used

3XX REDIRECTION
300 Multiple Choices
301 Moved Permanently
302 Found
303 See other
304 Not modified
305 Use proxy
306 Switch Proxy
307 Temporary Redirect
308 Permanent Redirect

4XX CLIENT ERRORS
400 Bad request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found
405 Method Not Allowed
405 Method Not Allowed
407 Proxy Authentication Required (RFC 7235)
408 Request Timeout
408 Request Timeout
410 Gone
411 Length Required
412 Precondition Failed (RFC 7232)
413 Payload Too Large (RFC 7231)
414 URI Too Long (RFC 7231)
415 Unsupported Media Type
416 Range Not Satisfiable (RFC 7233)
417 Expectation Failed
418 I'm a teapot (RFC 2324)
421 Misdirected Request (RFC 7540)
422 Unprocessable Entity (WebDAV; RFC 4918)
423 Locked (WebDAV; RFC 4918)
424 Failed Dependency (WebDAV; RFC 4918)
424 Failed Dependency (WebDAV; RFC 4918)
428 Precondition Required (RFC 6585)
429 Too Many Requests (RFC 6585)
431 Request Header Fields Too Large (RFC 6585)
451 Unavailable For Legal Reasons (RFC 7725)

5XX SERVER EEROR
500 Internal Server Error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 Gateway Timeout
505 HTTP Version Not Supported
506 Variant Also Negotiates (RFC 2295)
507 Insufficient Storage (WebDAV; RFC 4918)
508 Loop Detected (WebDAV; RFC 5842)
510 Not Extended (RFC 2774)
511 Network Authentication Required (RFC 6585)

